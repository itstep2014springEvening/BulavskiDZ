using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Events
{
    public enum Day {M, D, Mit, Don, Fr, Sb, S  };
    abstract class Event
    {
        public readonly uint time;
        public Event(uint time)
        {
            this.time = time;
        }
        public virtual void process() { }
    }

    class NewPassangerEvent : Event
    {
        public readonly List<Stop>.Enumerator where;
        public NewPassangerEvent(uint time, List<Stop>.Enumerator where)
            : base(time)
        {
            this.where = where;
        }

        public override void process()
        {
            Console.WriteLine("{0}: New passanger at {1}", Program.time, where.Current.name);
            new Passanger(where);
        }
    }

    class BusArrivalEvent : Event
    {
        Bus bus;
        Passanger passanger;
        public BusArrivalEvent(uint time, Bus bus) :
            base(time)
        {
            this.bus = bus;
        }
        public override void process()
        {
            bus.next();
            Console.WriteLine("{0}: A Bus arrived to the  {1}", Program.time, bus.where.name);
            bus.takeoff();
            bus.boarding();
            


            Program.events.Add(new BusArrivalEvent(time + 7, bus));

        }
    }
    class Stop
    {
        public Queue<Passanger> passangers;
        public readonly uint timeToNext;
        public readonly uint passangerInterval;
        public readonly string name;
        public Stop(string name, uint timeToNext, uint passangerInterval)
        {
            this.name = name;
            this.timeToNext = timeToNext;
            this.passangerInterval = passangerInterval;
            this.passangers = new Queue<Passanger>();
        }
    }
    class Bus
    {
        public List<Stop>.Enumerator stopEnumerator;
        const uint capacity = 18;
        // 
        public static List<Passanger> passangers = new List<Passanger>();
        public Stop where
        {
            get
            {
                return stopEnumerator.Current;
            }
        }

        public Bus()
        {

            this.stopEnumerator = Program.stops.GetEnumerator();
            Program.events.Add(new BusArrivalEvent(1, this));
        }
        public void next()
        {
            if (stopEnumerator.MoveNext() == false)
            {
                stopEnumerator = Program.stops.GetEnumerator();
                stopEnumerator.MoveNext();
            }
        }

        public void boarding()
        {
            while ((where.passangers.Count > 0) && (Bus.passangers.Count < Bus.capacity))
            {
                Passanger p = where.passangers.Dequeue();
                passangers.Add(p);
                
                Console.WriteLine("{0}: Пассажир садится в аватобус  на {1}", Program.time, where.name);
            }

        }
        public void takeoff()
        {
           foreach(Passanger p in passangers)
           {
               if(p.exitStop == where)
               {
                   Console.WriteLine("{0}: Пассажир выходит из аватобуса  на {1}", Program.time, where.name);
               }
           }
        }

    }
    class Passanger
    {
        public List<Stop>.Enumerator stopEnumerator;
        readonly uint arrival;
        // остановка, где пассажир ожидает
        readonly Stop boardingStop;
        //остановка, где выходит
        readonly public Stop exitStop;
        public Passanger( List<Stop>.Enumerator stopEnumerator )
        {
            arrival = Program.time;
            uint nextArrival = Program.time + 3;
            Program.events.Add(new NewPassangerEvent(nextArrival, stopEnumerator));

            ////////////////////////


            this.boardingStop = stopEnumerator.Current;
            this.boardingStop.passangers.Enqueue(this);

            int numberOfStops = 2;
            for (;numberOfStops > 0; numberOfStops--)
            {
                if(stopEnumerator.MoveNext() == false)
                {
                    break;
                }
            }
            exitStop = stopEnumerator.Current;   

        }
    }

    class Program
    {
        public static uint time;
        public static List<Event> events;
        public static List<Stop> stops;
  
        static void Main(string[] args)
        {
            time = 0;
            stops = new List<Stop>(){
                    new Stop("Kastrychnickaja", 200, 3),
                    new Stop("Niamiha", 180, 6),
                    new Stop("Frunzenskaja", 190, 5),
                    new Stop("Niamiha", 300, 6)
            };

            // добовляем событие прихода первых пассажиров
            List<Stop>.Enumerator stopEnumerator = stops.GetEnumerator();
            events = new List<Event>() ;
            while(stopEnumerator.MoveNext())
            {
                events.Add(new NewPassangerEvent(1, stopEnumerator));
            }

            Bus bus = new Bus();

            while (time < 50)
            {
                uint mintime = events[0].time;
                Event upcomingEvent = events[0];
                foreach (Event ev in events)
                {
                    if (ev.time < mintime)
                    {
                        mintime = ev.time;
                        upcomingEvent = ev;
                    }
                }
                time = upcomingEvent.time;
                upcomingEvent.process();
                events.Remove(upcomingEvent);

            }
            
  
        }
    }
}
